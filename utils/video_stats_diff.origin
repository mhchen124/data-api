// Schema [description: string, end_time: string, id: string, name: string, obj_type: string, period: string, stats_type: string, sys_time: string, title: string, value: string]

import org.joda.time.{DateTime, Period}
import org.apache.spark.sql.hive.HiveContext

val hiveCtx = new HiveContext(sc)

val dateNow = (new DateTime()).minusDays(3)
val dateDayAgo = dateNow.minusDays(1)

val arrNew:Array[String] = dateNow.toLocalDate.toString.split("-")
val arrOld:Array[String] = dateDayAgo.toLocalDate.toString.split("-")

val pageId = "1495821923975356"
val s3PathBucket = "s3n://gps-stats"
val s3PathKeyPrefix = "fb-graph-"
val s3PathKeySuffix = ".video_insights.data"

val s3PathYmdNew = arrNew(0) + "/" + arrNew(1) + "/" + arrNew(2)
val s3PathNew = s3PathBucket + "/" + s3PathYmdNew  + "/" + s3PathKeyPrefix + pageId + "-" + dateNow.toLocalDate + s3PathKeySuffix
val s3OutputPath = s3PathBucket + "/" + s3PathYmdNew  + "/"
val s3PathYmdOld = arrOld(0) + "/" + arrOld(1) + "/" + arrOld(2)
val s3PathOld = s3PathBucket + "/" + s3PathYmdOld  + "/" + s3PathKeyPrefix + pageId + "-" + dateDayAgo.toLocalDate + s3PathKeySuffix
 
val statsNew = hiveCtx.jsonFile(s3PathNew)
val statsOld = hiveCtx.jsonFile(s3PathOld)

val joined = statsNew.join(statsOld, statsNew("id") === statsOld("id"))
val diffed = joined.select(statsOld("description"), statsOld("title"), statsOld("name"), statsOld("id"), statsOld("obj_type"), statsOld("period"), statsOld("stats_type"), statsOld("sys_time"), statsOld("value").as('old_value), statsNew("value").as('new_value), (statsNew("value")-statsOld("value")).as('value))
case class Stats(description: String, title: String, name: String, id: String, obj_type: String, period: String, stats_type: String, sys_time: String, old_value: String, new_value: String, value: Double)
var modified  = diffed.map( x => { val col0=x.getAs[String]("description").replace("Lifetime:", "DailyComp"); Stats( col0, x.getAs[String]("title").replace("Lifetime", "Daily"), x.getAs[String]("name"), x.getAs[String]("id"), x.getAs[String]("obj_type"), "day", "DailyDiff", x.getAs[String]("sys_time"), x.getAs[String]("old_value"), x.getAs[String]("new_value"), x.getAs[Double]("value") ) } )
val finalRes = modified.toDF()
finalRes.show 
finalRes.repartition(1).save(s3OutputPath + "video_insights_diff", "json")
